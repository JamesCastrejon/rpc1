package rpc1;

import static org.assertj.core.api.Assertions.assertThat;

import org.junit.Test;
import org.junit.runner.RunWith;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.boot.web.server.LocalServerPort;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;

@RunWith(SpringRunner.class)
@WebMvcTest(MyRestController.class)
public class Test_End_Points {

	@Autowired
	private MyRestController controller;

	@Autowired
	private MockMvc mockMvc;

	@MockBean
	EmployeeService empService;

	@Test
	public void endPointTest() {
		// prepare data and mock's behaviour
		Item itemStub = new Item(1, "Mushroom", 5, "Restores 15 HP");
		when(empService.save(any(Item.class))).thenReturn(itemStub);

		// execute
		MvcResult result = mockMvc.perform(MockMvcRequestBuilders.post(URL).contentType(MediaType.APPLICATION_JSON_UTF8)
				.accept(MediaType.APPLICATION_JSON_UTF8).content(TestUtils.objectToJson(itemStub))).andReturn();

		// verify
		int status = result.getResponse().getStatus();
		assertEquals("Incorrect Response Status", HttpStatus.CREATED.value(), status);

		// verify that service method was called once
		verify(empService).save(any(Item.class));

		Item resultItem = TestUtils.jsonToObject(result.getResponse().getContentAsString(), Item.class);
		assertNotNull(resultItem);
		assertEquals(11, resultItem.getId()));
	}

}
